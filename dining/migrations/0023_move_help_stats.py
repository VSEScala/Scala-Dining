# Generated by Django 3.2.8 on 2021-10-22 18:47

from django.db import migrations
from django.db.models import F

"""
How this migration works:

1. The last 2 migrations renamed the existing 'has_shopped' to 'has_shopped_old' and added a
   new field with the same name 'has_shopped' on DiningEntry (instead of on DiningEntryUser).
2. This migration copies the data in the 'has_shopped_old' column to the new column.
3. The next migrations delete the old columns.

Similarly for the other fields 'has_cooked', 'has_cleaned' and 'external_name'.
"""


def move_forward(apps, schema_editor):
    # DiningEntry = apps.get_model("dining", "DiningEntry")  # type: DiningEntry
    # DiningWork = apps.get_model("dining", "DiningWork")
    DiningEntryUser = apps.get_model("dining", "DiningEntryUser")
    DiningEntryExternal = apps.get_model("dining", "DiningEntryExternal")
    # Implementation note: can't use Django's update() here because it only works for 1 table

    # Help stats
    for obj in DiningEntryUser.objects.all():
        obj.has_shopped = obj.has_shopped_old
        obj.has_cooked = obj.has_cooked_old
        obj.has_cleaned = obj.has_cleaned_old
        obj.save()
    # External name
    for obj in DiningEntryExternal.objects.all():
        obj.external_name = obj.name
        obj.save()


def move_backward(apps, schema_editor):
    # Migrating backwards requires creating new entries, is not (yet) implemented
    # DiningEntry = apps.get_model("dining", "DiningEntry")
    # DiningWork = apps.get_model("dining", "DiningWork")
    # DiningEntryUser = apps.get_model("dining", "DiningEntryUser")
    # DiningEntryExternal = apps.get_model("dining", "DiningEntryExternal")
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('dining', '0022_auto_20211022_2047'),
    ]

    operations = [
        migrations.RunPython(move_forward, elidable=True)
    ]
